{"entries":[{"timestamp":1729736096536,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"243\" y=\"-27\"><statement name=\"HANDLER\"><block type=\"custom_sensorMonitoring\"></block></statement"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\""],[0,"></b"]],"start1":12,"start2":12,"length1":198,"length2":103},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n    custom.sensorMonitoring()\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":61,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\""],[0,"\n   "]],"start1":141,"start2":141,"length1":142,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":225,"start2":225,"length1":67,"length2":44}]},{"type":"added","filename":"Plumbot.ts","value":"//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * センサーモニタリングを行う関数\n     */\n    //% block\n    export function sensorMonitoring(): void {\n        OLED12864_I2C.init(60);\n        basic.forever(function () {\n            OLED12864_I2C.showString(1, 0, \"monitoring\", 1);\n            OLED12864_I2C.showString(0, 1, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 2, \" \", 1);\n                OLED12864_I2C.showNumber(1, 2, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 2, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 2, \" \", 1);\n                OLED12864_I2C.showNumber(9, 2, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 2, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n\n            OLED12864_I2C.showString(0, 3, \"Sonar\", 1);\n\n            let distance = sonar.ping(DigitalPin.P12, DigitalPin.P11, PingUnit.Centimeters);\n            if (distance < 10) {\n                OLED12864_I2C.showString(6, 3, \"  \", 1);\n                OLED12864_I2C.showNumber(8, 3, distance, 1);\n                OLED12864_I2C.showString(9, 3, \" cm\", 1);\n            } else if (distance < 100) {\n                OLED12864_I2C.showString(6, 3, \" \", 1);\n                OLED12864_I2C.showNumber(7, 3, distance, 1);\n                OLED12864_I2C.showString(9, 3, \" cm\", 1);\n            } else {\n                OLED12864_I2C.showNumber(6, 3, distance, 1);\n            }\n        });\n    }\n}\n\n"}]},{"timestamp":1729736544757,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ock "],[-1,"type=\"pxt-on-start\" x=\"-265\" y=\"4\"><statement name=\"HANDLER\"><block type=\"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value></block></statement></block><block "],[0,"type"]],"start1":81,"start2":81,"length1":228,"length2":8},{"diffs":[[0," x=\""],[-1,"0"],[1,"243"],[0,"\" y=\""],[-1,"0"],[1,"-27"],[0,"\"><s"]],"start1":106,"start2":106,"length1":15,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"OLED12864_I2C.init(60)\n"],[0,"basi"]],"start1":0,"start2":0,"length1":27,"length2":4}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":21,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"or=#"],[-1,"FFA500"],[1,"0fbc11"],[0," ico"]],"start1":18,"start2":18,"length1":14,"length2":14},{"diffs":[[0,"lock"],[-1,"=\"センサーモニタリング\""],[0,"\n   "]],"start1":105,"start2":105,"length1":21,"length2":8},{"diffs":[[0," void {\n"],[1,"        OLED12864_I2C.init(60);\n"],[0,"        "]],"start1":149,"start2":149,"length1":16,"length2":48},{"diffs":[[0,"ters"],[-1,", 200); // 距離制限を200cmに設定\n            if (distance == 0) {\n                OLED12864_I2C.showString(6, 3, \"Err\", 1); // エラー表示\n            } else"],[1,");\n           "],[0," if "]],"start1":1247,"start2":1247,"length1":151,"length2":22},{"diffs":[[0,"   }\n}\n\n"],[-1,"\n"]],"start1":1788,"start2":1788,"length1":9,"length2":8}]}]},{"timestamp":1729737140760,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"=\"-2"],[-1,"97"],[1,"65"],[0,"\" y=\""],[-1,"-1"],[1,"4"],[0,"\"><s"]],"start1":106,"start2":106,"length1":17,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":17,"length2":21}]}]},{"timestamp":1729737192639,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"ace "],[-1,"Plumbot {\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n"],[1,"custom {"],[0,"\n   "]],"start1":44,"start2":44,"length1":181,"length2":16},{"diffs":[[0,"nce "],[-1,">"],[1,"=="],[0," 0) {"],[-1,"  // 距離が0より大きい場合のみ"],[1,"\n                OLED12864_I2C.showString(6, 3, \"Err\", 1); // エラー"],[0,"表示\n "]],"start1":1278,"start2":1278,"length1":32,"length2":80},{"diffs":[[0,"ー表示\n            "],[-1,"   "],[1,"} else"],[0," if (distance < "]],"start1":1353,"start2":1353,"length1":35,"length2":38},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"OLED12864_I2C.sh"]],"start1":1397,"start2":1397,"length1":36,"length2":32},{"diffs":[[0,"6, 3, \"  \", 1);\n"],[-1,"    "],[0,"                "]],"start1":1438,"start2":1438,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"OLED12864_I2C.sh"]],"start1":1515,"start2":1515,"length1":36,"length2":32},{"diffs":[[0,"1);\n            "],[-1,"    "],[0,"} else if (dista"]],"start1":1569,"start2":1569,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"OLED12864_I2C.sh"]],"start1":1614,"start2":1614,"length1":36,"length2":32},{"diffs":[[0,"(6, 3, \" \", 1);\n"],[-1,"    "],[0,"                "]],"start1":1654,"start2":1654,"length1":36,"length2":32},{"diffs":[[0,", distance, 1);\n"],[-1,"    "],[0,"                "]],"start1":1715,"start2":1715,"length1":36,"length2":32},{"diffs":[[0,"1);\n            "],[-1,"    "],[0,"} else {\n       "]],"start1":1785,"start2":1785,"length1":36,"length2":32},{"diffs":[[0,"       } else {\n"],[-1,"    "],[0,"                "]],"start1":1794,"start2":1794,"length1":36,"length2":32},{"diffs":[[0,"1);\n"],[-1,"                }\n            } else {\n                // Sonarが0の場合は何も表示しない\n                OLED12864_I2C.showString(6, 3, \"        \", 1); // 既存の表示をクリア\n"],[0,"    "]],"start1":1867,"start2":1867,"length1":161,"length2":8},{"diffs":[[0,"  }\n}\n\n\n"],[-1,"\n"]],"start1":1899,"start2":1899,"length1":9,"length2":8}]}]},{"timestamp":1729737764512,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"-297"],[0,"\" y=\""],[-1,"0"],[1,"-1"],[0,"\"><s"]],"start1":104,"start2":104,"length1":15,"length2":19},{"diffs":[[0,"pe=\""],[-1,"Plumbot_initOLED\""],[1,"OLED12864_I2C_init\"><value name=\"addr\"><shadow type=\"math_number\"><field name=\"NUM\">60</field></shadow></value"],[0,"></b"]],"start1":156,"start2":156,"length1":25,"length2":118},{"diffs":[[0," x=\""],[-1,"214"],[1,"0"],[0,"\" y=\""],[-1,"1"],[1,"0"],[0,"\"><s"]],"start1":327,"start2":327,"length1":17,"length2":15},{"diffs":[[0,"pe=\""],[-1,"Plumbot"],[1,"custom"],[0,"_sen"]],"start1":375,"start2":375,"length1":15,"length2":14}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"Plumbot.initOLED("],[1,"OLED12864_I2C.init(60"],[0,")\nba"]],"start1":0,"start2":0,"length1":21,"length2":25},{"diffs":[[0,"    "],[-1,"Plumbot"],[1,"custom"],[0,".sen"]],"start1":51,"start2":51,"length1":15,"length2":14}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"or=#"],[-1,"ea618e"],[1,"FFA500"],[0," ico"]],"start1":18,"start2":18,"length1":14,"length2":14},{"diffs":[[0,"meters, "],[-1,"5"],[1,"2"],[0,"00); // "]],"start1":1391,"start2":1391,"length1":17,"length2":17},{"diffs":[[0,"00cmに設定\n"],[1,"            if (distance > 0) {  // 距離が0より大きい場合のみ表示\n"],[0,"        "]],"start1":1414,"start2":1414,"length1":16,"length2":68},{"diffs":[[0," }\n            }"],[1," else {"],[0,"\n        );\n    "]],"start1":2036,"start2":2036,"length1":32,"length2":39},{"diffs":[[0,"        "],[1,"        // Sonarが0の場合は何も表示しない\n                OLED12864_I2C.showString(6, 3, \"        \", 1); // 既存の表示をクリア\n            }\n        }"],[0,");\n    }"]],"start1":2060,"start2":2060,"length1":16,"length2":145},{"diffs":[[0,"    }\n}\n"],[1,"\n\n\n"]],"start1":2200,"start2":2200,"length1":8,"length2":11}]}]},{"timestamp":1729738210794,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_forever"],[1,"pxt-on-start"],[0,"\" x=\""],[-1,"214"],[1,"0"],[0,"\" y=\""],[-1,"1"],[1,"0"],[0,"\"><s"]],"start1":87,"start2":87,"length1":36,"length2":32},{"diffs":[[0,"pe=\""],[-1,"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM"],[1,"Plumbot_initOLED"],[0,"\">"],[-1,"0"],[0,"</"],[-1,"field></shadow><block type=\"ultrasonic_sensor\"><field name=\"unit\">PingUnit.Centimeters</field></block></value><next><block type=\"Plumbot_sensorMonitoring\"></block></next></block></statement></block><block type=\"pxt-on-start"],[1,"block></statement></block><block type=\"device_forever"],[0,"\" x=\""],[-1,"36"],[1,"214"],[0,"\" y=\""],[-1,"52"],[1,"1"],[0,"\"><s"]],"start1":152,"start2":152,"length1":334,"length2":95},{"diffs":[[0,"pe=\"Plumbot_"],[-1,"initOLED"],[1,"sensorMonitoring"],[0,"\"></block></"]],"start1":280,"start2":280,"length1":32,"length2":40}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    basic.showNumber(Plumbot.Ultrasonic(PingUnit.Centimeters))\n"],[0,"    "]],"start1":43,"start2":43,"length1":71,"length2":8}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"    /**\n     * 超音波センサーの値を取得するブロック\n     * EchoピンはP12, TrigピンはP11\n     * @param unit 単位（cmかインチ） PingUnit.Centimeters を推奨\n     * @param maxCmDistance 最大距離 (センチメートル) デフォルトは500cm\n     */\n    let state1 = 0;\n    //% blockId=ultrasonic_sensor block=\"read ultrasonic sensor |%unit\"\n    //% weight=95\n    export function Ultrasonic(unit: PingUnit, maxCmDistance = 500): number {\n        let data;\n        let i = 0;\n        data = readUlt(unit);\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt(unit);\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 500;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 500;\n        return data;\n    }\n\n    function readUlt(unit: number): number {\n        let d;\n        pins.digitalWritePin(DigitalPin.P11, 1); // Trigピン\n        basic.pause(1);\n        pins.digitalWritePin(DigitalPin.P11, 0);\n\n        if (pins.digitalReadPin(DigitalPin.P12) == 0) { // Echoピン\n            pins.digitalWritePin(DigitalPin.P11, 0);\n            pins.digitalWritePin(DigitalPin.P11, 1);\n            basic.pause(20);\n            pins.digitalWritePin(DigitalPin.P11, 0);\n            d = pins.pulseIn(DigitalPin.P12, PulseValue.High, 500 * 58);\n        } else {\n            pins.digitalWritePin(DigitalPin.P11, 1);\n            pins.digitalWritePin(DigitalPin.P11, 0);\n            basic.pause(20);\n            pins.digitalWritePin(DigitalPin.P11, 0);\n            d = pins.pulseIn(DigitalPin.P12, PulseValue.Low, 500 * 58);\n        }\n\n        let x = d / 59;\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            case PingUnit.Inches: return Math.round(d / 148); // インチの場合の換算\n            default: return Math.idiv(d, 2.54); // デフォルトはインチ\n        }\n    }\n"],[0,"}\n"]],"start1":2014,"start2":2014,"length1":2040,"length2":6}]}]},{"timestamp":1729738671027,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"pxt-on-start"],[1,"device_forever"],[0,"\" x=\""],[-1,"-101"],[1,"214"],[0,"\" y="]],"start1":87,"start2":87,"length1":29,"length2":30},{"diffs":[[0,"pe=\""],[-1,"Plumbot_initOLED"],[1,"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM"],[0,"\">"],[1,"0"],[0,"</"],[-1,"block></statement></block><block type=\"device_forever"],[1,"field></shadow><block type=\"ultrasonic_sensor\"><field name=\"unit\">PingUnit.Centimeters</field></block></value><next><block type=\"Plumbot_sensorMonitoring\"></block></next></block></statement></block><block type=\"pxt-on-start"],[0,"\" x=\""],[-1,"121"],[1,"36"],[0,"\" y=\""],[-1,"1"],[1,"52"],[0,"\"><s"]],"start1":156,"start2":156,"length1":95,"length2":334},{"diffs":[[0,"Plumbot_"],[-1,"sensorMonitoring"],[1,"initOLED"],[0,"\"></bloc"]],"start1":527,"start2":527,"length1":32,"length2":24}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"on () {\n"],[1,"    basic.showNumber(Plumbot.Ultrasonic(PingUnit.Centimeters))\n"],[0,"    Plum"]],"start1":39,"start2":39,"length1":16,"length2":79}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"t {\n"],[-1,"    let state1 = 0; // state1の初期化\n\n"],[0,"    "]],"start1":54,"start2":54,"length1":43,"length2":8},{"diffs":[[0,"う関数\n"],[-1,"     * ラインセンサーと超音波センサーのデータを表示\n"],[0,"    "]],"start1":249,"start2":249,"length1":38,"length2":8},{"diffs":[[0,"tance = "],[-1,"Ultrasonic("],[1,"sonar.ping(DigitalPin.P12, DigitalPin.P11, "],[0,"PingUnit"]],"start1":1326,"start2":1326,"length1":27,"length2":59},{"diffs":[[0,"rs, "],[-1,"2"],[1,"5"],[0,"00); // "],[-1,"超音波センサの値を取得\n            if (distance > 0) {  // 距離が0より大きい場合のみ表示"],[1,"距離制限を200cmに設定"],[0,"\n   "]],"start1":1395,"start2":1395,"length1":80,"length2":30},{"diffs":[[0,"        "],[-1,"}"],[0,");\n    }"]],"start1":2001,"start2":2001,"length1":17,"length2":16},{"diffs":[[0,"   );\n    }\n"],[-1,"\n"],[0,"    /**\n    "]],"start1":2006,"start2":2006,"length1":25,"length2":24},{"diffs":[[0,"* 超音波センサ"],[1,"ー"],[0,"の値を取得するブ"]],"start1":2031,"start2":2031,"length1":16,"length2":17},{"diffs":[[0,"  * "],[-1,"Trig"],[1,"Echo"],[0,"ピンはP12, "],[-1,"Echo"],[1,"Trig"],[0,"ピンはP"]],"start1":2055,"start2":2055,"length1":24,"length2":24},{"diffs":[[0,"インチ）"],[-1,"デフォルトはcm"],[1," PingUnit.Centimeters を推奨"],[0,"\n   "]],"start1":2107,"start2":2107,"length1":16,"length2":33},{"diffs":[[0,"トは500cm\n     */\n"],[1,"    let state1 = 0;\n"],[0,"    //% blockId="]],"start1":2184,"start2":2184,"length1":32,"length2":52},{"diffs":[[0,"ck=\""],[-1,"超音波センサの値 |%unit\"\n    //% unit.defl=PingUnit.Centimeters"],[1,"read ultrasonic sensor |%unit\""],[0,"\n   "]],"start1":2257,"start2":2257,"length1":63,"length2":38},{"diffs":[[0,"igitalPin.P1"],[-1,"2"],[1,"1"],[0,", 1); // Tri"]],"start1":3073,"start2":3073,"length1":25,"length2":25},{"diffs":[[0,"igitalPin.P1"],[-1,"2"],[1,"1"],[0,", 0);\n\n     "]],"start1":3156,"start2":3156,"length1":25,"length2":25},{"diffs":[[0,"alPin.P1"],[-1,"1"],[1,"2"],[0,") == 0) "]],"start1":3213,"start2":3213,"length1":17,"length2":17},{"diffs":[[0,"in(DigitalPin.P1"],[-1,"2"],[1,"1"],[0,", 0);\n          "]],"start1":3272,"start2":3272,"length1":33,"length2":33},{"diffs":[[0,"in(DigitalPin.P1"],[-1,"2"],[1,"1"],[0,", 1);\n          "]],"start1":3325,"start2":3325,"length1":33,"length2":33},{"diffs":[[0,"in(DigitalPin.P1"],[-1,"2"],[1,"1"],[0,", 0);\n          "]],"start1":3407,"start2":3407,"length1":33,"length2":33},{"diffs":[[0,"In(DigitalPin.P1"],[-1,"1"],[1,"2"],[0,", PulseValue.Hig"]],"start1":3456,"start2":3456,"length1":33,"length2":33},{"diffs":[[0,"alPin.P1"],[-1,"2"],[1,"1"],[0,", 1);\n  "]],"start1":3558,"start2":3558,"length1":17,"length2":17},{"diffs":[[0,"in(DigitalPin.P1"],[-1,"2"],[1,"1"],[0,", 0);\n          "]],"start1":3603,"start2":3603,"length1":33,"length2":33},{"diffs":[[0,"alPin.P1"],[-1,"2"],[1,"1"],[0,", 0);\n  "]],"start1":3693,"start2":3693,"length1":17,"length2":17},{"diffs":[[0,"alPin.P1"],[-1,"1"],[1,"2"],[0,", PulseV"]],"start1":3742,"start2":3742,"length1":17,"length2":17}]}]},{"timestamp":1729739137598,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"-101\" y=\"1\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"121\" y=\"1\"><statement name=\"HANDLER\"><block type=\"Plumbot_sensorMonitoring\"></block></statement></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":276}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"Plumbot.initOLED()\nbasic.forever(function () {\n    Plumbot.sensorMonitoring()\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":81}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"rasonic("],[1,"PingUnit.Centimeters, 200"],[0,"); // 超音"]],"start1":1402,"start2":1402,"length1":16,"length2":41},{"diffs":[[0,"oピンはP11\n"],[1,"     * @param unit 単位（cmかインチ）デフォルトはcm\n"],[0,"     * @"]],"start1":2158,"start2":2158,"length1":16,"length2":54},{"diffs":[[0,") デフォルトは"],[-1,"2"],[1,"5"],[0,"00cm\n   "]],"start1":2245,"start2":2245,"length1":17,"length2":17},{"diffs":[[0,"超音波センサの値"],[1," |%unit"],[0,"\"\n"],[1,"    //% unit.defl=PingUnit.Centimeters\n"],[0,"    //% "]],"start1":2308,"start2":2308,"length1":18,"length2":64},{"diffs":[[0,"rasonic("],[1,"unit: PingUnit, "],[0,"maxCmDis"]],"start1":2405,"start2":2405,"length1":16,"length2":32},{"diffs":[[0,"tance = "],[-1,"2"],[1,"5"],[0,"00): num"]],"start1":2437,"start2":2437,"length1":17,"length2":17},{"diffs":[[0," data = readUlt("],[1,"unit"],[0,");\n        if (s"]],"start1":2504,"start2":2504,"length1":32,"length2":36},{"diffs":[[0,"readUlt("],[1,"unit"],[0,");\n     "]],"start1":2722,"start2":2722,"length1":16,"length2":20},{"diffs":[[0,"         data = "],[-1,"2"],[1,"5"],[0,"00;\n            "]],"start1":2846,"start2":2846,"length1":33,"length2":33},{"diffs":[[0," data = "],[-1,"2"],[1,"5"],[0,"00;\n    "]],"start1":3014,"start2":3014,"length1":17,"length2":17},{"diffs":[[0,"readUlt("],[1,"unit: number"],[0,"): numbe"]],"start1":3068,"start2":3068,"length1":16,"length2":28},{"diffs":[[0,"e.High, "],[-1,"2"],[1,"5"],[0,"00 * 58)"]],"start1":3556,"start2":3556,"length1":17,"length2":17},{"diffs":[[0,"0 * 58);"],[-1," // 最大距離を200cmに設定"],[0,"\n       "]],"start1":3566,"start2":3566,"length1":33,"length2":16},{"diffs":[[0,"ue.Low, "],[-1,"2"],[1,"5"],[0,"00 * 58)"]],"start1":3833,"start2":3833,"length1":17,"length2":17},{"diffs":[[0,"58);"],[-1," // 最大距離を200cmに設定"],[0,"\n   "]],"start1":3847,"start2":3847,"length1":25,"length2":8},{"diffs":[[0,"    "],[-1,"return Math.round(x"],[1,"switch (unit) {\n            case PingUnit.Centimeters: return Math.round(x);\n            case PingUnit.Inches: return Math.round(d / 148"],[0,"); // "],[-1,"センチメートル単位で返す"],[1,"インチの場合の換算\n            default: return Math.idiv(d, 2.54); // デフォルトはインチ\n        }"],[0,"\n    }\n}"],[1,"\n"]],"start1":3891,"start2":3891,"length1":49,"length2":235}]}]},{"timestamp":1729739788602,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,") デフォルトは"],[-1,"99"],[1,"200"],[0,"cm\n     "]],"start1":2182,"start2":2182,"length1":18,"length2":19},{"diffs":[[0,"tance = "],[-1,"99"],[1,"200"],[0,"): numbe"]],"start1":2312,"start2":2312,"length1":18,"length2":19},{"diffs":[[0,"         data = "],[-1,"99"],[1,"200"],[0,";\n              "]],"start1":2713,"start2":2713,"length1":34,"length2":35},{"diffs":[[0," data = "],[-1,"99"],[1,"200"],[0,";\n      "]],"start1":2881,"start2":2881,"length1":18,"length2":19},{"diffs":[[0,"e.High, "],[-1,"99"],[1,"200"],[0," * 58); "]],"start1":3411,"start2":3411,"length1":18,"length2":19},{"diffs":[[0," * 58); // 最大距離を"],[-1,"99"],[1,"200"],[0,"cmに設定\n        } "]],"start1":3422,"start2":3422,"length1":34,"length2":35},{"diffs":[[0,"ue.Low, "],[-1,"99"],[1,"200"],[0," * 58); "]],"start1":3705,"start2":3705,"length1":18,"length2":19},{"diffs":[[0,"// 最大距離を"],[-1,"99"],[1,"200"],[0,"cmに設定\n  "]],"start1":3724,"start2":3724,"length1":18,"length2":19},{"diffs":[[0,"す\n    }\n"],[1,""],[0,"}"],[-1,"\n"]],"start1":3820,"start2":3820,"length1":10,"length2":9}]}]},{"timestamp":1729740197836,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"es><"],[-1,"block type=\"pxt-on-start\" x=\"85\" y=\"147\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"297\" y=\"143\"><statement name=\"HANDLER\"><block type=\"Plumbot_sensorMonitoring\"></block></statement></block><"],[0,"/xml"]],"start1":75,"start2":75,"length1":273,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"Plumbot.initOLED()\nbasic.forever(function () {\n    Plumbot.sensorMonitoring()\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":81,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":21,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"umbot {\n"],[1,"    let state1 = 0; // state1の初期化\n\n"],[0,"    /**\n"]],"start1":50,"start2":50,"length1":16,"length2":51},{"diffs":[[0,"  * "],[-1,"ライン"],[0,"センサー"],[-1,"と超音波センサーの"],[0,"モニタリ"]],"start1":268,"start2":268,"length1":24,"length2":12},{"diffs":[[0,"グを行う"],[-1,"ブロック"],[1,"関数"],[0,"\n     * "],[-1,"P3とP4は"],[0,"ラインセンサー"],[-1,"、P12とP11は超音波センサー用"],[1,"と超音波センサーのデータを表示"],[0,"\n   "]],"start1":281,"start2":281,"length1":50,"length2":40},{"diffs":[[0,") {\n"],[-1,"            // モニタリング開始\n"],[0,"    "]],"start1":432,"start2":432,"length1":32,"length2":8},{"diffs":[[0,");\n\n"],[-1,"            // ラインセンサの値 (左: P3)\n"],[0,"    "]],"start1":558,"start2":558,"length1":40,"length2":8},{"diffs":[[0," }\n\n"],[-1,"            // ラインセンサの値 (右: P4)\n"],[0,"    "]],"start1":934,"start2":934,"length1":40,"length2":8},{"diffs":[[0," }\n\n"],[-1,"            // 超音波センサの値 (P12: Trig, P11: Echo)\n"],[0,"    "]],"start1":1311,"start2":1311,"length1":55,"length2":8},{"diffs":[[0,"e = "],[-1,"sonar.ping(DigitalPin.P12, DigitalPin.P11, PingUnit.Centimeters);\n"],[1,"Ultrasonic(); // 超音波センサの値を取得\n            if (distance > 0) {  // 距離が0より大きい場合のみ表示\n "],[0,"    "]],"start1":1395,"start2":1395,"length1":74,"length2":90},{"diffs":[[0,"表示\n             "],[1,"   "],[0,"if (distance < 1"]],"start1":1477,"start2":1477,"length1":32,"length2":35},{"diffs":[[0,"nce < 10) {\n"],[1,"    "],[0,"            "]],"start1":1505,"start2":1505,"length1":24,"length2":28},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"OLED12864_I2C.sh"]],"start1":1578,"start2":1578,"length1":32,"length2":36},{"diffs":[[0,", distance, 1);\n"],[1,"    "],[0,"                "]],"start1":1627,"start2":1627,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"} else if (d"]],"start1":1705,"start2":1705,"length1":24,"length2":28},{"diffs":[[0,"ce < 100) {\n"],[1,"    "],[0,"            "]],"start1":1738,"start2":1738,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"OLED12864_I2C.sh"]],"start1":1810,"start2":1810,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"OLED12864_I2C.sh"]],"start1":1875,"start2":1875,"length1":32,"length2":36},{"diffs":[[0,"1);\n            "],[1,"    "],[0,"} else {\n       "]],"start1":1933,"start2":1933,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"OLED12864_I2C.sh"]],"start1":1962,"start2":1962,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"}\n        });"],[1,"    }\n            }\n        });\n    }\n\n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12, EchoピンはP11\n     * @param maxCmDistance 最大距離 (センチメートル) デフォルトは99cm\n     */\n    //% blockId=ultrasonic_sensor block=\"超音波センサの値\"\n    //% weight=95\n    export function Ultrasonic(maxCmDistance = 99): number {\n        let data;\n        let i = 0;\n        data = readUlt();\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt();\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 99;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 99;\n        return data;\n    }\n\n    function readUlt(): number {\n        let d;\n        pins.digitalWritePin(DigitalPin.P12, 1); // Trigピン\n        basic.pause(1);\n        pins.digitalWritePin(DigitalPin.P12, 0);\n\n        if (pins.digitalReadPin(DigitalPin.P11) == 0) { // Echoピン\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P11, PulseValue.High, 99 * 58); // 最大距離を99cmに設定\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P11, PulseValue.Low, 99 * 58); // 最大距離を99cmに設定\n        }\n\n        let x = d / 59;\n        return Math.round(x); // センチメートル単位で返す"],[0,"\n   "]],"start1":2035,"start2":2035,"length1":21,"length2":1782}]}]},{"timestamp":1729740842668,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"85"],[0,"\" y=\""],[-1,"0"],[1,"147"],[0,"\"><s"]],"start1":104,"start2":104,"length1":15,"length2":18},{"diffs":[[0,"x=\"2"],[-1,"12"],[1,"97"],[0,"\" y=\""],[-1,"-4"],[1,"143"],[0,"\"><s"]],"start1":234,"start2":234,"length1":17,"length2":18}]}]},{"timestamp":1729740843590,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"38"],[1,"0"],[0,"\" y=\""],[-1,"51"],[1,"0"],[0,"\"><s"]],"start1":104,"start2":104,"length1":17,"length2":15},{"diffs":[[0,"x=\"2"],[-1,"37"],[1,"12"],[0,"\" y=\""],[-1,"51"],[1,"-4"],[0,"\"><s"]],"start1":231,"start2":231,"length1":17,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"umbot {\n"],[-1,"\n"],[0,"    /**\n"]],"start1":50,"start2":50,"length1":17,"length2":16},{"diffs":[[0,"  * "],[-1,"超音波"],[1,"ライン"],[0,"センサーと"],[-1,"ライン"],[1,"超音波"],[0,"センサー"]],"start1":233,"start2":233,"length1":19,"length2":19},{"diffs":[[0," * P"],[-1,"12とP11は超音波センサー、P3とP4はライン"],[1,"3とP4はラインセンサー、P12とP11は超音波"],[0,"センサー"]],"start1":271,"start2":271,"length1":32,"length2":32},{"diffs":[[0,"ング開始"],[-1,"表示"],[0,"\n   "]],"start1":442,"start2":442,"length1":10,"length2":8},{"diffs":[[0," 1);"],[-1,"\n\n            // 超音波センサの値 (P12: Trig, P11: Echo) - 2行目"],[0,"\n   "]],"start1":503,"start2":503,"length1":62,"length2":8},{"diffs":[[0,"1, \""],[-1,"Sonar"],[1,"Line_L Line_R"],[0,"\", 1);\n"],[-1,"  "],[1,"\n"],[0,"    "]],"start1":548,"start2":548,"length1":22,"length2":29},{"diffs":[[0,"    "],[-1,"let distance = UltrasonicSensor();"],[1," "],[0," // "],[-1,"超音波"],[1,"ライン"],[0,"センサの値"],[-1,"を取得"],[1," (左: P3)"],[0,"\n   "]],"start1":579,"start2":579,"length1":57,"length2":29},{"diffs":[[0,"    if ("],[-1,"distance < 10"],[1,"pins.analogReadPin(AnalogPin.P3) < 999"],[0,") {\n    "]],"start1":613,"start2":613,"length1":29,"length2":54},{"diffs":[[0,"wString("],[-1,"6, 1"],[1,"0, 2"],[0,", \""],[-1," "],[0," \", 1);\n"]],"start1":696,"start2":696,"length1":24,"length2":23},{"diffs":[[0,"ber("],[-1,"8, 1, distance, 1);\n                OLED12864_I2C.showString(9, 1, \" cm\", 1);\n            } else if (distance < 100) {\n                OLED12864_I2C.showString(6, 1, \" \", 1);\n                OLED12864_I2C.showNumber(7, 1, distance"],[1,"1, 2, pins.analogReadPin(AnalogPin.P3)"],[0,", 1)"]],"start1":756,"start2":756,"length1":238,"length2":46},{"diffs":[[0,"ing("],[-1,"9, 1"],[1,"4, 2"],[0,", \" "],[-1,"cm"],[0,"\", 1"]],"start1":841,"start2":841,"length1":18,"length2":16},{"diffs":[[0,"ber("],[-1,"6, 1, distance"],[1,"0, 2, pins.analogReadPin(AnalogPin.P3)"],[0,", 1)"]],"start1":918,"start2":918,"length1":22,"length2":46},{"diffs":[[0,"の値 ("],[-1,"左: P3、右: P4) - 3行目と4行目\n            OLED12864_I2C.showString(0, 2, \"Line_L\", 1);"],[1,"右: P4)"],[0,"\n   "]],"start1":1002,"start2":1002,"length1":87,"length2":14},{"diffs":[[0,"dPin(AnalogPin.P"],[-1,"3"],[1,"4"],[0,") < 999) {\n     "]],"start1":1043,"start2":1043,"length1":33,"length2":33},{"diffs":[[0,"wString("],[-1,"7"],[1,"8"],[0,", 2, \" \""]],"start1":1104,"start2":1104,"length1":17,"length2":17},{"diffs":[[0,"wNumber("],[-1,"8"],[1,"9"],[0,", 2, pin"]],"start1":1160,"start2":1160,"length1":17,"length2":17},{"diffs":[[0,"dPin(AnalogPin.P"],[-1,"3)"],[1,"4), 1);\n                OLED12864_I2C.showString(12, 2, \" \""],[0,", 1);\n          "]],"start1":1188,"start2":1188,"length1":34,"length2":91},{"diffs":[[0,"wNumber("],[-1,"7"],[1,"8"],[0,", 2, pin"]],"start1":1323,"start2":1323,"length1":17,"length2":17},{"diffs":[[0,"dPin(AnalogPin.P"],[-1,"3"],[1,"4"],[0,"), 1);\n         "]],"start1":1351,"start2":1351,"length1":33,"length2":33},{"diffs":[[0,"\n            }\n\n"],[1,"            // 超音波センサの値 (P12: Trig, P11: Echo)\n"],[0,"            OLED"]],"start1":1374,"start2":1374,"length1":32,"length2":79},{"diffs":[[0,"(0, 3, \""],[-1,"Line_R"],[1,"Sonar"],[0,"\", 1);\n"],[1,"\n"],[0,"        "]],"start1":1473,"start2":1473,"length1":29,"length2":29},{"diffs":[[0,"    "],[-1,"if (pins.analogReadPin(AnalogPin.P4) < 999"],[1,"let distance = sonar.ping(DigitalPin.P12, DigitalPin.P11, PingUnit.Centimeters);\n            if (distance < 10"],[0,") {\n"]],"start1":1502,"start2":1502,"length1":50,"length2":118},{"diffs":[[0,"ing("],[-1,"7"],[1,"6"],[0,", 3, \""],[1," "],[0," \", "]],"start1":1657,"start2":1657,"length1":15,"length2":16},{"diffs":[[0," 3, "],[-1,"pins.analogReadPin(AnalogPin.P4), 1);\n            } else {\n                OLED12864_I2C.showNumber(7, 3, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n        });\n    }\n\n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12、EchoピンはP11、単位はcmに固定\n     */\n    //% block=\"超音波センサの値\"\n    export function UltrasonicSensor(): number {\n        // トリガーピンとエコーピンを固定\n        const trig = DigitalPin.P12;\n        const echo = DigitalPin.P11;\n        const maxCmDistance = 500;\n\n        // トリガーピンでパルスを送信\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0"],[1,"distance, 1);\n                OLED12864_I2C.showString(9, 3, \" cm\", 1);\n            } else if (distance < 100) {\n                OLED12864_I2C.showString(6, 3, \" \", 1);\n                OLED12864_I2C.showNumber(7, 3, distance, 1"],[0,");\n "]],"start1":1720,"start2":1720,"length1":586,"length2":235},{"diffs":[[0,"    "],[-1,"control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // エコーピンでパルスの返り時間を読み取る\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmD"],[1,"        OLED12864_I2C.showString(9, 3, \" cm\", 1);\n            } else {\n                OLED12864_I2C.showNumber(6, 3, d"],[0,"istance"],[-1," * 58"],[1,", 1"],[0,");\n"],[-1,"\n"],[0,"        "],[-1,"// センチメートルに変換して返す\n"],[1," "],[0,"   "],[1,"}\n"],[0,"     "],[-1,"return Math.idiv(d, 58"],[1,"   }"],[0,");\n "]],"start1":1958,"start2":1958,"length1":305,"length2":163}]}]},{"timestamp":1729741311089,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"38"],[0,"\" y=\""],[-1,"0"],[1,"51"],[0,"\"><s"]],"start1":104,"start2":104,"length1":15,"length2":17},{"diffs":[[0,"x=\"2"],[-1,"22"],[1,"37"],[0,"\" y=\""],[-1,"0"],[1,"51"],[0,"\"><s"]],"start1":233,"start2":233,"length1":16,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"  * "],[-1,"ライン"],[1,"超音波"],[0,"センサーと"],[-1,"超音波"],[1,"ライン"],[0,"センサー"]],"start1":234,"start2":234,"length1":19,"length2":19},{"diffs":[[0," * P"],[-1,"3とP4はラインセンサー、P12とP11は超音波"],[1,"12とP11は超音波センサー、P3とP4はライン"],[0,"センサー"]],"start1":272,"start2":272,"length1":32,"length2":32},{"diffs":[[0,"d {\n"],[-1,"        let lastDistance = 0; // 前回の超音波センサーの値を保持\n"],[0,"    "]],"start1":384,"start2":384,"length1":57,"length2":8},{"diffs":[[0," // "],[-1,"ラインセンサの値 (左: P3、右: P4) - 1行目"],[1,"モニタリング開始表示"],[0,"\n   "]],"start1":435,"start2":435,"length1":36,"length2":18},{"diffs":[[0,"ing("],[-1,"0"],[1,"1"],[0,", 0, \""],[-1,"Line_L Line_R"],[1,"monitoring"],[0,"\", 1"]],"start1":483,"start2":483,"length1":28,"length2":25},{"diffs":[[0,"    "],[-1,"if (pins.analogReadPin(AnalogPin.P3) < 999) {\n  "],[1,"// 超音波センサの値 (P12: Trig, P11: Echo) - 2行目\n"],[0,"    "]],"start1":520,"start2":520,"length1":56,"length2":49},{"diffs":[[0,"2行目\n            "],[-1,"  "],[0,"OLED12864_I2C.sh"]],"start1":561,"start2":561,"length1":34,"length2":32},{"diffs":[[0,"ring(0, 1, \""],[-1," "],[1,"Sonar"],[0,"\", 1);\n     "]],"start1":597,"start2":597,"length1":25,"length2":29},{"diffs":[[0,"    "],[-1,"    OLED12864_I2C.showNumber(1, 1, pins.analogReadPin(AnalogPin.P3), 1);"],[1,"let distance = UltrasonicSensor(); // 超音波センサの値を取得\n            if (distance < 10) {"],[0,"\n   "]],"start1":629,"start2":629,"length1":80,"length2":90},{"diffs":[[0,"ing("],[-1,"4"],[1,"6"],[0,", 1, \""],[1," "],[0," \", 1);\n"],[-1,"            } else {\n"],[0,"    "]],"start1":753,"start2":753,"length1":44,"length2":24},{"diffs":[[0,"ber("],[-1,"0"],[1,"8"],[0,", 1, "],[-1,"pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999"],[1,"distance, 1);\n                OLED12864_I2C.showString(9, 1, \" cm\", 1);\n            } else if (distance < 100"],[0,") {\n"]],"start1":810,"start2":810,"length1":121,"length2":123},{"diffs":[[0,"wString("],[-1,"8"],[1,"6"],[0,", 1, \" \""]],"start1":966,"start2":966,"length1":17,"length2":17},{"diffs":[[0,"ber("],[-1,"9"],[1,"7"],[0,", 1, "],[-1,"pins.analogReadPin(AnalogPin.P4)"],[1,"distance"],[0,", 1)"]],"start1":1026,"start2":1026,"length1":46,"length2":22},{"diffs":[[0,"ing("],[-1,"12"],[1,"9"],[0,", 1, \" "],[1,"cm"],[0,"\", 1"]],"start1":1087,"start2":1087,"length1":17,"length2":18},{"diffs":[[0,"ber("],[-1,"8"],[1,"6"],[0,", 1, "],[-1,"pins.analogReadPin(AnalogPin.P4)"],[1,"distance"],[0,", 1)"]],"start1":1166,"start2":1166,"length1":46,"length2":22},{"diffs":[[0," // "],[-1,"超音波"],[1,"ライン"],[0,"センサの値 ("],[-1,"P12: Trig, P11: Echo"],[1,"左: P3、右: P4"],[0,") - "],[-1,"2行目と3"],[1,"3行目と4"],[0,"行目\n "]],"start1":1216,"start2":1216,"length1":47,"length2":38},{"diffs":[[0,"2, \""],[-1,"Sonar"],[1,"Line_L"],[0,"\", 1);\n"],[-1,"\n"],[0,"    "]],"start1":1293,"start2":1293,"length1":21,"length2":21},{"diffs":[[0,"    "],[-1,"let distance = UltrasonicSensor(); // 超音波センサの値を取得\n\n            // 値が0でない場合のみ更新する\n            if (distance != 0) {\n                lastDistance = distance; // 有効な値であれば更新\n                if (distance < 10) {\n                    OLED12864_I2C.showString(6, 2, \"  \""],[1,"if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(7, 2, \" \", 1);\n                OLED12864_I2C.showNumber(8, 2, pins.analogReadPin(AnalogPin.P3)"],[0,", 1)"]],"start1":1318,"start2":1318,"length1":269,"length2":189},{"diffs":[[0,"in.P3), 1);\n    "],[1,"        } else {\n"],[0,"                "]],"start1":1497,"start2":1497,"length1":32,"length2":49},{"diffs":[[0,"ber("],[-1,"8"],[1,"7"],[0,", 2, "],[-1,"distance"],[1,"pins.analogReadPin(AnalogPin.P3)"],[0,", 1)"]],"start1":1567,"start2":1567,"length1":22,"length2":46},{"diffs":[[0,"), 1);\n         "],[1,"   }\n\n"],[0,"           OLED1"]],"start1":1608,"start2":1608,"length1":32,"length2":38},{"diffs":[[0,"  }\n\n           "],[1," "],[0,"OLED12864_I2C.sh"]],"start1":1625,"start2":1625,"length1":32,"length2":33},{"diffs":[[0,".showString("],[-1,"9, 2, \" cm"],[1,"0, 3, \"Line_R"],[0,"\", 1);\n     "]],"start1":1655,"start2":1655,"length1":34,"length2":37},{"diffs":[[0,"    "],[-1,"    } else if (distance < 100) {\n    "],[1,"if (pins.analogReadPin(AnalogPin.P4) < 999) {\n"],[0,"    "]],"start1":1695,"start2":1695,"length1":45,"length2":54},{"diffs":[[0,"wString("],[-1,"6, 2"],[1,"7, 3"],[0,", \" \", 1"]],"start1":1778,"start2":1778,"length1":20,"length2":20},{"diffs":[[0,"                "],[-1,"    "],[0,"OLED12864_I2C.sh"]],"start1":1801,"start2":1801,"length1":36,"length2":32},{"diffs":[[0,"ber("],[-1,"7, 2, distance, 1);\n                    OLED12864_I2C.showString(9, 2, \" cm\""],[1,"8, 3, pins.analogReadPin(AnalogPin.P4)"],[0,", 1)"]],"start1":1838,"start2":1838,"length1":84,"length2":46},{"diffs":[[0,"1);\n            "],[-1,"    "],[0,"} else {\n       "]],"start1":1882,"start2":1882,"length1":36,"length2":32},{"diffs":[[0,"       } else {\n"],[-1,"    "],[0,"                "]],"start1":1891,"start2":1891,"length1":36,"length2":32},{"diffs":[[0,"ber("],[-1,"6, 2, distance, 1);\n                }"],[1,"7, 3, pins.analogReadPin(AnalogPin.P4), 1);"],[0,"\n   "]],"start1":1944,"start2":1944,"length1":45,"length2":51},{"diffs":[[0,"して返す"],[-1,"。0の場合はそのまま返す"],[0,"\n   "]],"start1":2699,"start2":2699,"length1":20,"length2":8},{"diffs":[[0," 58)"],[-1," || 0"],[0,";\n  "]],"start1":2731,"start2":2731,"length1":13,"length2":8}]}]},{"timestamp":1729741699536,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":17,"length2":21}]}]},{"timestamp":1729743381663,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"oring(): void {\n"],[1,"        let lastDistance = 0; // 前回の超音波センサーの値を保持\n"],[0,"        basic.fo"]],"start1":372,"start2":372,"length1":32,"length2":81},{"diffs":[[0,"nction () {\n"],[-1,""],[0,"            "]],"start1":461,"start2":461,"length1":24,"length2":24},{"diffs":[[0,"ンサの値を取得\n"],[1,"\n            // 値が0でない場合のみ更新する\n            if (distance != 0) {\n                lastDistance = distance; // 有効な値であれば更新\n    "],[0,"        "]],"start1":1503,"start2":1503,"length1":16,"length2":139},{"diffs":[[0,"nce < 10) {\n"],[1,"    "],[0,"            "]],"start1":1655,"start2":1655,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"OLED12864_I2C.sh"]],"start1":1728,"start2":1728,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"OLED12864_I2C.sh"]],"start1":1793,"start2":1793,"length1":32,"length2":36},{"diffs":[[0,", 2, \" cm\", 1);\n"],[1,"    "],[0,"            } el"]],"start1":1839,"start2":1839,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"OLED12864_I2C.sh"]],"start1":1900,"start2":1900,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"OLED12864_I2C.sh"]],"start1":1960,"start2":1960,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"OLED12864_I2C.sh"]],"start1":2025,"start2":2025,"length1":32,"length2":36},{"diffs":[[0,", 2, \" cm\", 1);\n"],[1,"    "],[0,"            } el"]],"start1":2071,"start2":2071,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"OLED12864_I2C.sh"]],"start1":2112,"start2":2112,"length1":32,"length2":36},{"diffs":[[0,", distance, 1);\n"],[1,"                }\n"],[0,"            }\n  "]],"start1":2161,"start2":2161,"length1":32,"length2":50},{"diffs":[[0,"ルに変換して返す"],[1,"。0の場合はそのまま返す"],[0,"\n       "]],"start1":2898,"start2":2898,"length1":16,"length2":28},{"diffs":[[0,"v(d, 58)"],[1," || 0"],[0,";\n    }\n"]],"start1":2942,"start2":2942,"length1":16,"length2":21}]}]},{"timestamp":1729743564656,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"=\"22"],[-1,"7"],[1,"2"],[0,"\" y=\""],[-1,"14"],[1,"0"],[0,"\"><s"]],"start1":232,"start2":232,"length1":16,"length2":15},{"diffs":[[0,"pe=\""],[-1,"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Plumbot_UltrasonicSensor\"></block></value"],[1,"Plumbot_sensorMonitoring\""],[0,"></b"]],"start1":280,"start2":280,"length1":155,"length2":33}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"serial.writeLine(\"\" + (Plumbot.UltrasonicSensor())"],[1,"Plumbot.sensorMonitoring("],[0,")\n})"]],"start1":47,"start2":47,"length1":58,"length2":33}]}]},{"timestamp":1729743690530,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"ock=\"センサ"],[1,"ー"],[0,"モニタリング\"\n"]],"start1":324,"start2":324,"length1":16,"length2":17}]}]},{"timestamp":1729748767476,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0," block=\""],[-1,"ライン"],[0,"センサモニタリン"]],"start1":321,"start2":321,"length1":19,"length2":16}]}]},{"timestamp":1729748770112,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_forever"],[1,"pxt-on-start"],[0,"\" x=\""],[-1,"201"],[1,"0"],[0,"\" y="]],"start1":87,"start2":87,"length1":30,"length2":26},{"diffs":[[0,"pe=\""],[-1,"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"Plumbot_UltrasonicSensor\""],[1,"Plumbot_initOLED\"></block></statement></block"],[0,"><"],[-1,"/"],[0,"block"],[-1,"></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow><block type=\"Plumbot_UltrasonicSensor\"></block></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number"],[1," type=\"device_forever\" x=\"227\" y=\"14\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text"],[0,"\"><f"]],"start1":152,"start2":152,"length1":1185,"length2":192},{"diffs":[[0,"me=\""],[-1,"NUM\">12"],[1,"TEXT\">"],[0,"</fi"]],"start1":351,"start2":351,"length1":15,"length2":14},{"diffs":[[0,"ue><"],[-1,"value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement></block></statement></block><block type=\"pxt-on-start\" x=\"52\" y=\"55\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"><"],[0,"/blo"]],"start1":430,"start2":430,"length1":245,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"if (Plumbot.UltrasonicSensor() < 10) {\n        OLED12864_I2C.showNumber(\n        1,\n        0,\n        Plumbot.UltrasonicSensor(),\n        1\n        )\n    } else {\n        OLED12864_I2C.showNumber(\n        0,\n        0,\n        Plumbot.UltrasonicSensor(),\n        1\n        )\n    }"],[1,"serial.writeLine(\"\" + (Plumbot.UltrasonicSensor()))"],[0,"\n})\n"]],"start1":47,"start2":47,"length1":289,"length2":59}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":21,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"   * ラインセンサー"],[1,"と超音波センサー"],[0,"のモニタリングを行うブロ"]],"start1":233,"start2":233,"length1":24,"length2":32},{"diffs":[[0,"3とP4はラインセンサー"],[1,"、P12とP11は超音波センサー"],[0,"用\n     */\n  "]],"start1":276,"start2":276,"length1":24,"length2":40},{"diffs":[[0,"unction "],[-1,"Line"],[0,"sensorMo"]],"start1":355,"start2":355,"length1":20,"length2":16},{"diffs":[[0,"  }\n"],[1,"\n"],[0,"        "],[-1,"});\n    }\n    /**\n     * 超音波センサーのモニタリングを行うブロック\n     * P12とP11は超音波センサー用\n     */\n    //% block=\"超音波センサモニタリング\"\n    export function SonarsensorMonitoring(): void {\n        basic.forever(function () {"],[1,"    // 超音波センサの値 (P12: Trig, P11: Echo) - 2行目と3行目\n            OLED12864_I2C.showString(0, 2, \"Sonar\", 1);\n"],[0,"\n   "]],"start1":1283,"start2":1283,"length1":211,"length2":122},{"diffs":[[0,".showString("],[-1,"0, 0"],[1,"6, 2"],[0,", \"  \", 1);\n"]],"start1":1526,"start2":1526,"length1":28,"length2":28},{"diffs":[[0,"_I2C.showNumber("],[-1,"2, 0"],[1,"8, 2"],[0,", distance, 1);\n"]],"start1":1579,"start2":1579,"length1":36,"length2":36},{"diffs":[[0,"_I2C.showString("],[-1,"3, 0"],[1,"9, 2"],[0,", \" cm\", 1);\n   "]],"start1":1640,"start2":1640,"length1":36,"length2":36},{"diffs":[[0,"wString("],[-1,"0, 0"],[1,"6, 2"],[0,", \" \", 1"]],"start1":1747,"start2":1747,"length1":20,"length2":20},{"diffs":[[0,"ber("],[-1,"2, 0"],[1,"7, 2"],[0,", di"]],"start1":1807,"start2":1807,"length1":12,"length2":12},{"diffs":[[0,"ing("],[-1,"3, 0"],[1,"9, 2"],[0,", \" "]],"start1":1868,"start2":1868,"length1":12,"length2":12},{"diffs":[[0,"wNumber("],[-1,"0, 0"],[1,"6, 2"],[0,", distan"]],"start1":1943,"start2":1943,"length1":20,"length2":20}]}]},{"timestamp":1729749740672,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    serial.writeLine(\"\")\n"],[0,"    "]],"start1":43,"start2":43,"length1":33,"length2":8}]}]},{"timestamp":1729749745214,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"157"],[1,"201"],[0,"\" y=\""],[-1,"-284"],[1,"0"],[0,"\"><s"]],"start1":106,"start2":106,"length1":20,"length2":17},{"diffs":[[0,"pe=\""],[-1,"Plumbot_initOLED\"><next><block type=\"OLED12864_I2C_NUMBER\""],[1,"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field"],[0,"><va"]],"start1":156,"start2":156,"length1":66,"length2":192},{"diffs":[[0,"ld><value name=\""],[-1,"x"],[1,"A"],[0,"\"><shadow type=\""]],"start1":342,"start2":342,"length1":33,"length2":33},{"diffs":[[0,"field></shadow><"],[1,"block type=\"Plumbot_UltrasonicSensor\"></block><"],[0,"/value><value na"]],"start1":409,"start2":409,"length1":32,"length2":79},{"diffs":[[0,"ue><value name=\""],[-1,"y"],[1,"B"],[0,"\"><shadow type=\""]],"start1":476,"start2":476,"length1":33,"length2":33},{"diffs":[[0,"ield name=\"NUM\">"],[1,"1"],[0,"0</field></shado"]],"start1":524,"start2":524,"length1":32,"length2":33},{"diffs":[[0,"ue><"],[-1,"value name=\"num"],[1,"/block></value><statement name=\"DO0\"><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x"],[0,"\"><s"]],"start1":564,"start2":564,"length1":23,"length2":94},{"diffs":[[0,"=\"NUM\">1"],[-1,"2"],[0,"</field>"]],"start1":694,"start2":694,"length1":17,"length2":16},{"diffs":[[0,"ow><"],[-1,"block type=\"sonar_ping\"><field name=\"trig\">DigitalPin.P12</field><field name=\"echo\">DigitalPin.P11</field><field name=\"unit\">PingUnit.Centimeters</field"],[1,"/value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow><block type=\"Plumbot_UltrasonicSensor\""],[0,"></b"]],"start1":716,"start2":716,"length1":160,"length2":222},{"diffs":[[0,"/value><"],[-1,"next"],[1,"/block></statement><statement name=\"ELSE\""],[0,"><block "]],"start1":1035,"start2":1035,"length1":20,"length2":57},{"diffs":[[0,"I2C_"],[-1,"SHOWSTRING"],[1,"NUMBER"],[0,"\"><v"]],"start1":1108,"start2":1108,"length1":18,"length2":14},{"diffs":[[0,"e=\"NUM\">"],[-1,"3"],[1,"0"],[0,"</field>"]],"start1":1173,"start2":1173,"length1":17,"length2":17},{"diffs":[[0,"e name=\""],[-1,"s"],[1,"num"],[0,"\"><shado"]],"start1":1299,"start2":1299,"length1":17,"length2":19},{"diffs":[[0,"pe=\""],[-1,"text"],[1,"math_number"],[0,"\"><f"]],"start1":1322,"start2":1322,"length1":12,"length2":19},{"diffs":[[0,"me=\""],[-1,"TEXT\">cm"],[1,"NUM\">12"],[0,"</fi"]],"start1":1348,"start2":1348,"length1":16,"length2":15},{"diffs":[[0,"field></shadow><"],[1,"block type=\"Plumbot_UltrasonicSensor\"></block><"],[0,"/value><value na"]],"start1":1361,"start2":1361,"length1":32,"length2":79},{"diffs":[[0,"k></"],[-1,"next></block></nex"],[1,"statemen"],[0,"t></"]],"start1":1528,"start2":1528,"length1":26,"length2":16},{"diffs":[[0," x=\""],[-1,"0"],[1,"52"],[0,"\" y=\""],[-1,"0"],[1,"55"],[0,"\"><s"]],"start1":1596,"start2":1596,"length1":15,"length2":17},{"diffs":[[0,"ck><"],[-1,"block type=\"Plumbot_UltrasonicSensor\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"365\" y=\"602\"></block><"],[0,"/xml"]],"start1":1693,"start2":1693,"length1":123,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"Plumbot.initOLED()\n"],[1,"serial.writeLine(\"\")\n    if (Plumbot.UltrasonicSensor() < 10) {\n "],[0,"    "],[1,"   "],[0,"OLED"]],"start1":47,"start2":47,"length1":31,"length2":80},{"diffs":[[0,"Number(\n    "],[-1,"0"],[1,"    1"],[0,",\n"],[1,"    "],[0,"    0,\n    s"]],"start1":141,"start2":141,"length1":27,"length2":35},{"diffs":[[0,"    "],[1,"  "],[-1,"sonar.ping(\n    DigitalPin.P12,\n    DigitalPin.P11,\n    PingUnit.Centimeters\n"],[1,"  Plumbot.UltrasonicSensor(),\n        1\n    "],[0,"    )"],[-1,","],[0,"\n    "],[-1,"1"],[1,"} else {"],[0,"\n    "],[-1,")\n"],[0,"    "]],"start1":171,"start2":171,"length1":104,"length2":77},{"diffs":[[0,"show"],[-1,"String"],[1,"Number"],[0,"(\n    "],[-1,"3"],[1,"    0"],[0,",\n    "],[1," "],[1,"   "],[0,"0,\n    "],[-1,"\"cm\",\n    1\n    )"],[1,"    Plumbot.UltrasonicSensor(),\n        1\n        )\n    }"],[0,"\n})\n"]],"start1":262,"start2":262,"length1":51,"length2":99}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":17,"length2":21}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"ンサの値を取得\n"],[1,"            if (distance < 10) {\n                OLED12864_I2C.showString(0, 0, \"  \", 1);\n                OLED12864_I2C.showNumber(2, 0, distance, 1);\n                OLED12864_I2C.showString(3, 0, \" cm\", 1);\n            } else if (distance < 100) {\n                OLED12864_I2C.showString(0, 0, \" \", 1);\n                OLED12864_I2C.showNumber(2, 0, distance, 1);\n                OLED12864_I2C.showString(3, 0, \" cm\", 1);\n            } else {\n"],[0,"        "]],"start1":1525,"start2":1525,"length1":16,"length2":462},{"diffs":[[0,", distance, 1);\n"],[1,"            }\n"],[0,"        });\n    "]],"start1":2024,"start2":2024,"length1":32,"length2":46}]}]},{"timestamp":1729750335285,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"pxt-on-start\" x=\"-186\" y=\"1\"></block><block type=\"device_forever\" x=\"0\" y=\"0"],[1,"device_forever\" x=\"157\" y=\"-284\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"><next><block type=\"OLED12864_I2C_NUMBER\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">12</field></shadow><block type=\"sonar_ping\"><field name=\"trig\">DigitalPin.P12</field><field name=\"echo\">DigitalPin.P11</field><field name=\"unit\">PingUnit.Centimeters</field></block></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"OLED12864_I2C_SHOWSTRING\"><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"s\"><shadow type=\"text\"><field name=\"TEXT\">cm</field></shadow></value><value name=\"color\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"Plumbot_UltrasonicSensor\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"365\" y=\"602"],[0,"\"></"]],"start1":87,"start2":87,"length1":84,"length2":1335}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"Plumbot.initOLED()\n"],[0,"basic.fo"]],"start1":0,"start2":0,"length1":8,"length2":27},{"diffs":[[0,") {\n"],[-1,"\t"],[1,"    Plumbot.initOLED()\n    OLED12864_I2C.showNumber(\n    0,\n    0,\n    sonar.ping(\n    DigitalPin.P12,\n    DigitalPin.P11,\n    PingUnit.Centimeters\n    ),\n    1\n    )\n    OLED12864_I2C.showString(\n    3,\n    0,\n    \"cm\",\n    1\n    )"],[0,"\n})\n"]],"start1":43,"start2":43,"length1":9,"length2":240}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":21,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"    "],[-1,"Plumbot.initOLED()\n        OLED12864_I2C.showNumber(0,0,sonar.ping(DigitalPin.P12,DigitalPin.P11,PingUnit.Centimeters),1)\n        OLED12864_I2C.showString(3,0,\"cm\",1)\n    }\n    /**\n    * 左のラインセンサーの値を取得するブロック\n    * P3に固定\n    */\n    //% block=\"左ラインセンサの値\"\n    export function getLeftLineSensorValue(): number {\n        return pins.analogReadPin(AnalogPin.P3); // 左のラインセンサーはP3に接続\n    }\n\n    /**\n    * 右のライン"],[1,"basic.forever(function () {\n            let distance = UltrasonicSensor(); // 超音波"],[0,"センサ"],[-1,"ー"],[0,"の値を取得"],[-1,"するブロック\n    * P4に固定\n"],[1,"\n     "],[0,"    "],[-1,"*/\n"],[0,"    "],[-1,"//% block=\"右ラインセンサの値\"\n    export function getRightLineSensorValue(): number {\n        return pins.analogReadPin(AnalogPin.P4); // 右のラインセンサーはP4に接続"],[1,"   OLED12864_I2C.showNumber(0, 0, distance, 1);\n        });"],[0,"\n    }\n"],[-1,"    "],[0,"\n   "]],"start1":1439,"start2":1439,"length1":605,"length2":177}]}]},{"timestamp":1729750764540,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"1\"><"],[-1,"statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"38\" y=\"49\"><statement name=\"HANDLER\"><block type=\"Plumbot_moveForward\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"Plumbot_moveBackward\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"Plumbot_turnRight\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"Plumbot_turnLeft\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement"],[1,"/block><block type=\"device_forever\" x=\"0\" y=\"0\""],[0,"></b"]],"start1":117,"start2":117,"length1":935,"length2":55}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"Plumbot.initOLED()\n"],[0,"basi"]],"start1":0,"start2":0,"length1":23,"length2":4},{"diffs":[[0,") {\n"],[-1,"    Plumbot.moveForward()\n    basic.pause(1000)\n    Plumbot.moveBackward()\n    basic.pause(1000)\n    Plumbot.turnRight()\n    basic.pause(1000)\n    Plumbot.turnLeft()\n    basic.pause(1000)"],[1,"\t"],[0,"\n})\n"]],"start1":24,"start2":24,"length1":195,"length2":9}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"    /**\n     * ロボットが直進するブロック\n     */\n    //% block=\"ロボット直進\"\n    export function moveForward(): void {\n        // 左モータ正転 (P13), 右モータ正転 (P15)\n        pins.analogWritePin(AnalogPin.P13, 1023); // 左モーター正転\n        pins.analogWritePin(AnalogPin.P14, 0);    // 左モーター逆転停止\n        pins.analogWritePin(AnalogPin.P15, 1023); // 右モーター正転\n        pins.analogWritePin(AnalogPin.P16, 0);    // 右モーター逆転停止\n    }\n\n    /**\n     * ロボットが後退するブロック\n     */\n    //% block=\"ロボット後退\"\n    export function moveBackward(): void {\n        // 左モータ逆転 (P14), 右モータ逆転 (P16)\n        pins.analogWritePin(AnalogPin.P13, 0);    // 左モーター正転停止\n        pins.analogWritePin(AnalogPin.P14, 1023); // 左モーター逆転\n        pins.analogWritePin(AnalogPin.P15, 0);    // 右モーター正転停止\n        pins.analogWritePin(AnalogPin.P16, 1023); // 右モーター逆転\n    }\n\n    /**\n     * ロボットが左回転するブロック\n     */\n    //% block=\"ロボット左回転\"\n    export function turnLeft(): void {\n        // 左モータ逆転 (P14), 右モータ正転 (P15)\n        pins.analogWritePin(AnalogPin.P13, 0);    // 左モーター正転停止\n        pins.analogWritePin(AnalogPin.P14, 1023); // 左モーター逆転\n        pins.analogWritePin(AnalogPin.P15, 1023); // 右モーター正転\n        pins.analogWritePin(AnalogPin.P16, 0);    // 右モーター逆転停止\n    }\n\n    /**\n     * ロボットが右回転するブロック\n     */\n    //% block=\"ロボット右回転\"\n    export function turnRight(): void {\n        // 左モータ正転 (P13), 右モータ逆転 (P16)\n        pins.analogWritePin(AnalogPin.P13, 1023); // 左モーター正転\n        pins.analogWritePin(AnalogPin.P14, 0);    // 左モーター逆転停止\n        pins.analogWritePin(AnalogPin.P15, 0);    // 右モーター正転停止\n        pins.analogWritePin(AnalogPin.P16, 1023); // 右モーター逆転\n    }\n"],[0,"}\n"]],"start1":2755,"start2":2755,"length1":1585,"length2":6}]}]},{"timestamp":1729751163010,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0\" y=\"0\""],[1,"-186\" y=\"1\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"38\" y=\"49\"><statement name=\"HANDLER\"><block type=\"Plumbot_moveForward\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"Plumbot_moveBackward\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"Plumbot_turnRight\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"Plumbot_turnLeft\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement"],[0,"></b"]],"start1":104,"start2":104,"length1":16,"length2":948}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"Plumbot.initOLED()\nbasic.forever(function () {\n    Plumbot.moveForward()\n    basic.pause(1000)\n    Plumbot.moveBackward()\n    basic.pause(1000)\n    Plumbot.turnRight()\n    basic.pause(1000)\n    Plumbot.turnLeft()\n    basic.pause(1000)\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":238}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"**\n     "],[-1,"  "],[0,"* ロボットが直"]],"start1":2764,"start2":2764,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"  * @param speed 速さ (0~1023) \n       */\n    //% block=\"ロボット直進 速さ %speed\"\n    //% speed.min=0 speed.max=1023"],[1,"*/\n    //% block=\"ロボット直進\""],[0,"\n   "]],"start1":2789,"start2":2789,"length1":115,"length2":33},{"diffs":[[0,"moveForward("],[-1,"speed: number"],[0,"): void {\n  "]],"start1":2839,"start2":2839,"length1":37,"length2":24},{"diffs":[[0,"(AnalogPin.P13, "],[-1,"speed"],[1,"1023"],[0,"); // 左モーター正転\n  "]],"start1":2926,"start2":2926,"length1":37,"length2":36},{"diffs":[[0,"Pin.P14, 0);    "],[-1," "],[0,"// 左モーター逆転停止\n   "]],"start1":2994,"start2":2994,"length1":33,"length2":32},{"diffs":[[0,"(AnalogPin.P15, "],[-1,"speed"],[1,"1023"],[0,"); // 右モーター正転\n  "]],"start1":3050,"start2":3050,"length1":37,"length2":36},{"diffs":[[0,"Pin.P16, 0);    "],[-1," "],[0,"// 右モーター逆転停止\n   "]],"start1":3118,"start2":3118,"length1":33,"length2":32},{"diffs":[[0,"   *"],[-1," @param speed 速さ (0~1023) \n     */\n    //% block=\"ロボット後退 速さ %speed\"\n    //% speed.min=0 speed.max=1023"],[1,"/\n    //% block=\"ロボット後退\""],[0,"\n   "]],"start1":3185,"start2":3185,"length1":110,"length2":32},{"diffs":[[0,"ackward("],[-1,"speed: number"],[0,"): void "]],"start1":3239,"start2":3239,"length1":29,"length2":16},{"diffs":[[0,"Pin.P13, 0);    "],[-1," "],[0,"// 左モーター正転停止\n   "]],"start1":3329,"start2":3329,"length1":33,"length2":32},{"diffs":[[0,"(AnalogPin.P14, "],[-1,"speed"],[1,"1023"],[0,"); // 左モーター逆転\n  "]],"start1":3385,"start2":3385,"length1":37,"length2":36},{"diffs":[[0,"Pin.P15, 0);    "],[-1," "],[0,"// 右モーター正転停止\n   "]],"start1":3453,"start2":3453,"length1":33,"length2":32},{"diffs":[[0,"(AnalogPin.P16, "],[-1,"speed"],[1,"1023"],[0,"); // 右モーター逆転\n  "]],"start1":3509,"start2":3509,"length1":37,"length2":36},{"diffs":[[0,"   *"],[-1," @param speed 速さ (0~1023) \n     */\n    //% block=\"ロボット左回転 速さ %speed\"\n    //% speed.min=0 speed.max=1023"],[1,"/\n    //% block=\"ロボット左回転\""],[0,"\n   "]],"start1":3582,"start2":3582,"length1":111,"length2":33},{"diffs":[[0,"urnLeft("],[-1,"speed: number"],[0,"): void "]],"start1":3633,"start2":3633,"length1":29,"length2":16},{"diffs":[[0,"Pin.P13, 0);    "],[-1," "],[0,"// 左モーター正転停止\n   "]],"start1":3723,"start2":3723,"length1":33,"length2":32},{"diffs":[[0,"in.P14, "],[-1,"speed"],[1,"1023"],[0,"); // 左モ"]],"start1":3787,"start2":3787,"length1":21,"length2":20},{"diffs":[[0,"in.P15, "],[-1,"speed"],[1,"1023"],[0,"); // 右モ"]],"start1":3848,"start2":3848,"length1":21,"length2":20},{"diffs":[[0,"Pin.P16, 0);"],[-1," "],[0,"    // 右モーター"]],"start1":3908,"start2":3908,"length1":25,"length2":24},{"diffs":[[0,"   *"],[-1," @param speed 速さ (0~1023) \n     */\n    //% block=\"ロボット右回転 速さ |%speed\"\n    //% speed.min=0 speed.max=1023"],[1,"/\n    //% block=\"ロボット右回転\""],[0,"\n   "]],"start1":3976,"start2":3976,"length1":112,"length2":33},{"diffs":[[0,"ght("],[-1,"speed: number"],[0,"): v"]],"start1":4032,"start2":4032,"length1":21,"length2":8},{"diffs":[[0,"in.P13, "],[-1,"speed"],[1,"1023"],[0,"); // 左モ"]],"start1":4119,"start2":4119,"length1":21,"length2":20},{"diffs":[[0,"Pin.P14, 0);"],[-1," "],[0,"    // 左モーター"]],"start1":4179,"start2":4179,"length1":25,"length2":24},{"diffs":[[0," 0);    "],[-1," "],[0,"// 右モーター"]],"start1":4250,"start2":4250,"length1":17,"length2":16},{"diffs":[[0,"16, "],[-1,"speed"],[1,"1023"],[0,"); /"]],"start1":4310,"start2":4310,"length1":13,"length2":12}]}]},{"timestamp":1729751754023,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"-341"],[1,"0"],[0,"\" y=\""],[-1,"84\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"-126\" y=\"82\"><statement name=\"HANDLER\"><block type=\"Plumbot_LinesensorMonitoring\"></block></statement"],[1,"0\""],[0,"></b"]],"start1":104,"start2":104,"length1":239,"length2":16}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"Plumbot.initOLED()\nbasic.forever(function () {\n    Plumbot.LinesensorMonitoring()\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":85,"length2":1}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0," 58);\n    }\n"],[-1,"\n"],[0,"    /**\n    "]],"start1":2747,"start2":2747,"length1":25,"length2":24},{"diffs":[[0,"   /**\n     "],[1,"  "],[0,"* ロボットが直進するブ"]],"start1":2760,"start2":2760,"length1":24,"length2":26},{"diffs":[[0,"    "],[-1,"*/\n    //% block=\"ロボット直進\""],[1,"  * @param speed 速さ (0~1023) \n       */\n    //% block=\"ロボット直進 速さ %speed\"\n    //% speed.min=0 speed.max=1023"],[0,"\n   "]],"start1":2791,"start2":2791,"length1":33,"length2":115},{"diffs":[[0,"moveForward("],[1,"speed: number"],[0,"): void {\n  "]],"start1":2923,"start2":2923,"length1":24,"length2":37},{"diffs":[[0,"(AnalogPin.P13, "],[-1,"1023"],[1,"speed"],[0,"); // 左モーター正転\n  "]],"start1":3023,"start2":3023,"length1":36,"length2":37},{"diffs":[[0,"(AnalogPin.P15, "],[-1,"1023"],[1,"speed"],[0,"); // 右モーター正転\n  "]],"start1":3149,"start2":3149,"length1":36,"length2":37},{"diffs":[[0,"   *"],[-1,"/\n    //% block=\"ロボット後退\""],[1," @param speed 速さ (0~1023) \n     */\n    //% block=\"ロボット後退 速さ %speed\"\n    //% speed.min=0 speed.max=1023"],[0,"\n   "]],"start1":3286,"start2":3286,"length1":32,"length2":110},{"diffs":[[0,"ackward("],[1,"speed: number"],[0,"): void "]],"start1":3418,"start2":3418,"length1":16,"length2":29},{"diffs":[[0,"(AnalogPin.P14, "],[-1,"1023"],[1,"speed"],[0,"); // 左モーター逆転\n  "]],"start1":3578,"start2":3578,"length1":36,"length2":37},{"diffs":[[0,"(AnalogPin.P16, "],[-1,"1023"],[1,"speed"],[0,"); // 右モーター逆転\n  "]],"start1":3704,"start2":3704,"length1":36,"length2":37},{"diffs":[[0,"   *"],[-1,"/\n    //% block=\"ロボット左回転\""],[1," @param speed 速さ (0~1023) \n     */\n    //% block=\"ロボット左回転 速さ %speed\"\n    //% speed.min=0 speed.max=1023"],[0,"\n   "]],"start1":3778,"start2":3778,"length1":33,"length2":111},{"diffs":[[0,"urnLeft("],[1,"speed: number"],[0,"): void "]],"start1":3907,"start2":3907,"length1":16,"length2":29},{"diffs":[[0,"in.P14, "],[-1,"1023"],[1,"speed"],[0,"); // 左モ"]],"start1":4075,"start2":4075,"length1":20,"length2":21},{"diffs":[[0,"in.P15, "],[-1,"1023"],[1,"speed"],[0,"); // 右モ"]],"start1":4137,"start2":4137,"length1":20,"length2":21},{"diffs":[[0,"   *"],[-1,"/\n    //% block=\"ロボット右回転\""],[1," @param speed 速さ (0~1023) \n     */\n    //% block=\"ロボット右回転 速さ |%speed\"\n    //% speed.min=0 speed.max=1023"],[0,"\n   "]],"start1":4267,"start2":4267,"length1":33,"length2":112},{"diffs":[[0,"rnRight("],[1,"speed: number"],[0,"): void "]],"start1":4398,"start2":4398,"length1":16,"length2":29},{"diffs":[[0,"in.P13, "],[-1,"1023"],[1,"speed"],[0,"); // 左モ"]],"start1":4502,"start2":4502,"length1":20,"length2":21},{"diffs":[[0,"16, "],[-1,"1023); // 右モーター逆転\n    }\n\n    /**\n     * ロボットを停止させるブロック\n     */\n    //% block=\"ロボット停止\"\n    export function stop(): void {\n        // すべてのモーターを停止\n        pins.analogWritePin(AnalogPin.P13, 0); // 左モーター正転停止\n        pins.analogWritePin(AnalogPin.P14, 0); // 左モーター逆転停止\n        pins.analogWritePin(AnalogPin.P15, 0); // 右モーター正転停止\n        pins.analogWritePin(AnalogPin.P16, 0"],[1,"speed"],[0,"); /"]],"start1":4696,"start2":4696,"length1":376,"length2":13},{"diffs":[[0,"; // 右モーター逆転"],[-1,"停止"],[0,"\n    }\n}\n"]],"start1":4706,"start2":4706,"length1":23,"length2":21}]}]},{"timestamp":1729752350341,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":17,"length2":21}]}]},{"timestamp":1729753295615,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"止\n    }\n"],[-1,"    \n"],[0,"}\n"]],"start1":4705,"start2":4705,"length1":15,"length2":10}]}]},{"timestamp":1729753308572,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"=\"-3"],[-1,"3"],[1,"41"],[0,"\" y=\""],[-1,"4"],[0,"8"],[1,"4"],[0,"\"><s"]],"start1":106,"start2":106,"length1":16,"length2":17},{"diffs":[[0,"x=\"-"],[-1,"3"],[1,"12"],[0,"6\" y=\""],[-1,"23"],[1,"8"],[0,"2\"><"]],"start1":235,"start2":235,"length1":17,"length2":17},{"diffs":[[0,"ock "],[-1,"type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><block "],[0,"type"]],"start1":280,"start2":280,"length1":236,"length2":8},{"diffs":[[0,"bot_"],[-1,"isLeft"],[0,"Line"],[-1,"S"],[1,"s"],[0,"ensor"],[-1,"White\"></block></value></block></value><statement name=\"DO0\"><block type=\"Plumbot_turnRight\"></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"Plumbot_isRightLineSensorWhite\"></block></value><statement name=\"DO1\"><block type=\"Plumbot_turnLeft\"></block></statement><statement name=\"ELSE\"><block type=\"Plumbot_moveForward\"></block></statement"],[1,"Monitoring\""],[0,"></b"]],"start1":294,"start2":294,"length1":435,"length2":29}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"if ("],[0,"Plumbot."],[-1,"isLeft"],[0,"Line"],[-1,"S"],[1,"s"],[0,"ensor"],[-1,"White() && false) {\n        Plumbot.turnRight()\n    } else if (Plumbot.isRightLineSensorWhite()) {\n        Plumbot.turnLeft()\n    } else {\n        Plumbot.moveForward()\n    }"],[1,"Monitoring()"],[0,"\n})\n"]],"start1":47,"start2":47,"length1":210,"length2":38}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":409,"start2":409,"length1":21,"length2":17}]},{"type":"edited","filename":"Plumbot.ts","patch":[{"diffs":[[0,"    "],[-1,"/**\n     * 左のラインセンサーが黒色を検出したときのブロック\n     * @returns true なら黒色、false なら白色\n     */\n    //% block=\"左ラインセンサが黒色の時\"\n    export function isLeftLineSensorBlack(): boolean {\n        // 左ラインセンサ (P3) の値が800以上なら黒色\n        return pins.analogReadPin(AnalogPin.P3) >= 800;\n    }\n\n    /**\n     * 右のラインセンサーが黒色を検出したときのブロック\n     * @returns true なら黒色、false なら白色\n     */\n    //% block=\"右ラインセンサが黒色の時\"\n    export function isRightLineSensorBlack(): boolean {\n        // 右ラインセンサ (P4) の値が800以上なら黒色\n        return pins.analogReadPin(AnalogPin.P4) >= 800;\n    }\n\n    /**\n     * 左のラインセンサーが白色を検出したときのブロック\n     * @returns true なら白色、false なら黒色\n     */\n    //% block=\"左ラインセンサが白色の時\"\n    export function isLeftLineSensorWhite(): boolean {\n        // 左ラインセンサ (P3) の値が800未満なら白色\n        return pins.analogReadPin(AnalogPin.P3) < 800;\n    }\n\n    /**\n     * 右のラインセンサーが白色を検出したときのブロック\n     * @returns true なら白色、false なら黒色\n     */\n    //% block=\"右ラインセンサが白色の時\"\n    export function isRightLineSensorWhite(): boolean {\n        // 右ラインセンサ (P4) の値が800未満なら白色\n        return pins.analogReadPin(AnalogPin.P4) < 800;\n    }"],[0,"\n}\n"]],"start1":4713,"start2":4713,"length1":1077,"length2":7}]}]},{"timestamp":1729753907227,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_forever\" id=\"Jz:dXmq/Z5Fx::p0wr.o\" x=\"0"],[1,"pxt-on-start\" x=\"-33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"-36"],[0,"\" y=\""],[-1,"0"],[1,"232"],[0,"\"><s"]],"start1":87,"start2":87,"length1":60,"length2":165},{"diffs":[[0,"_if\""],[-1," id=\"C7/p~y5j2rMtN%?QND1/\""],[0,"><mu"]],"start1":297,"start2":297,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"|z1GmwAE@eU,871%X[N?\""],[0,"><fi"]],"start1":385,"start2":385,"length1":34,"length2":8},{"diffs":[[0,"ion\""],[-1," id=\"?H1f;iG^a.,gpl)$Gq28\""],[0,"><fi"]],"start1":455,"start2":455,"length1":34,"length2":8},{"diffs":[[0,"ite\""],[-1," id=\"AD8[wB}=k58,a%;dsmOV\"></block></value><value name=\"B\"><block type=\"Plumbot_isRightLineSensorBlack\" id=\"67Iae@LRl!|cibZ6(~_1\""],[0,"></b"]],"start1":543,"start2":543,"length1":137,"length2":8},{"diffs":[[0,"ght\""],[-1," id=\"l:z3Y_:%WrG0jB1sDHgv\""],[0,"></b"]],"start1":629,"start2":629,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"Cnsu/ZR@bsQW{LB}z_Of\""],[0,"><fi"]],"start1":696,"start2":696,"length1":34,"length2":8},{"diffs":[[0,"pe=\""],[-1,"logic_operation\" id=\"T?_eWU[.wg(d)X.y}v{0\"><field name=\"OP\">AND</field><value name=\"A\"><block type=\"Plumbot_isLeftLineSensorBlack\" id=\"e0ZAfil6+LT!a};REH)~\"></block></value><value name=\"B\"><block type=\"Plumbot_isRightLineSensorWhite\" id=\"C]?kV~17;=--OLz-`19C\"></block></value"],[1,"Plumbot_isRightLineSensorWhite\""],[0,"></b"]],"start1":751,"start2":751,"length1":283,"length2":39},{"diffs":[[0,"eft\""],[-1," id=\"zCP)HZ1#A/hvfu@pHpI7\""],[0,"></b"]],"start1":851,"start2":851,"length1":34,"length2":8},{"diffs":[[0,"ard\""],[-1," id=\"^Lacylx8+6^20r]Hp)HN\""],[0,"></b"]],"start1":928,"start2":928,"length1":34,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"Plumbot.initOLED()\n"],[0,"basic.fo"]],"start1":0,"start2":0,"length1":8,"length2":27},{"diffs":[[0," && "],[-1,"Plumbot.isRightLineSensorBlack()"],[1,"false"],[0,") {\n"]],"start1":86,"start2":86,"length1":40,"length2":13},{"diffs":[[0,"if ("],[-1,"Plumbot.isLeftLineSensorBlack() && "],[0,"Plum"]],"start1":138,"start2":138,"length1":43,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":389,"start2":389,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1729736096535,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1729737907872,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"-207\" y=\"5\"><statement name=\"HANDLER\"><block type=\"custom_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"-5\" y=\"11\"><statement name=\"HANDLER\"><block type=\"custom_sensorMonitoring\"></block></statement></block></xml>","main.ts":"","README.md":"","Plumbot.ts":"//% weight=100 color=#FFA500 icon=\"\"\nnamespace custom {\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * センサーモニタリングを行う関数\n     */\n    //% block=\"センサーモニタリング\"\n    export function sensorMonitoring(): void {\n        basic.forever(function () {\n            OLED12864_I2C.showString(1, 0, \"monitoring\", 1);\n            OLED12864_I2C.showString(0, 1, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 2, \" \", 1);\n                OLED12864_I2C.showNumber(1, 2, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 2, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 2, \" \", 1);\n                OLED12864_I2C.showNumber(9, 2, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 2, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n\n            OLED12864_I2C.showString(0, 3, \"Sonar\", 1);\n\n            let distance = sonar.ping(DigitalPin.P12, DigitalPin.P11, PingUnit.Centimeters, 200); // 距離制限を200cmに設定\n            if (distance > 0) {  // 距離が0より大きい場合のみ表示\n                if (distance < 10) {\n                    OLED12864_I2C.showString(6, 3, \"  \", 1);\n                    OLED12864_I2C.showNumber(8, 3, distance, 1);\n                    OLED12864_I2C.showString(9, 3, \" cm\", 1);\n                } else if (distance < 100) {\n                    OLED12864_I2C.showString(6, 3, \" \", 1);\n                    OLED12864_I2C.showNumber(7, 3, distance, 1);\n                    OLED12864_I2C.showString(9, 3, \" cm\", 1);\n                } else {\n                    OLED12864_I2C.showNumber(6, 3, distance, 1);\n                }\n            } else {\n                // Sonarが0の場合は何も表示しない\n                OLED12864_I2C.showString(6, 3, \"        \", 1); // 既存の表示をクリア\n            }\n        });\n    }\n}\n\n\n\n","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1729739723823,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"-161\" y=\"12\"></block><block type=\"device_forever\" x=\"-170\" y=\"152\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"ultrasonic_sensor\"></block></value></block></statement></block></xml>","main.ts":"","README.md":"","Plumbot.ts":"//% weight=100 color=#ea618e icon=\"\"\nnamespace Plumbot {\n    let state1 = 0; // state1の初期化\n\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * センサーモニタリングを行う関数\n     * ラインセンサーと超音波センサーのデータを表示\n     */\n    //% block=\"センサーモニタリング\"\n    export function sensorMonitoring(): void {\n        basic.forever(function () {\n            OLED12864_I2C.showString(1, 0, \"monitoring\", 1);\n            OLED12864_I2C.showString(0, 1, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 2, \" \", 1);\n                OLED12864_I2C.showNumber(1, 2, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 2, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 2, \" \", 1);\n                OLED12864_I2C.showNumber(9, 2, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 2, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n\n            OLED12864_I2C.showString(0, 3, \"Sonar\", 1);\n\n            let distance = Ultrasonic(); // 超音波センサの値を取得\n            if (distance > 0) {  // 距離が0より大きい場合のみ表示\n                if (distance < 10) {\n                    OLED12864_I2C.showString(6, 3, \"  \", 1);\n                    OLED12864_I2C.showNumber(8, 3, distance, 1);\n                    OLED12864_I2C.showString(9, 3, \" cm\", 1);\n                } else if (distance < 100) {\n                    OLED12864_I2C.showString(6, 3, \" \", 1);\n                    OLED12864_I2C.showNumber(7, 3, distance, 1);\n                    OLED12864_I2C.showString(9, 3, \" cm\", 1);\n                } else {\n                    OLED12864_I2C.showNumber(6, 3, distance, 1);\n                }\n            }\n        });\n    }\n\n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12, EchoピンはP11\n     * @param maxCmDistance 最大距離 (センチメートル) デフォルトは200cm\n     */\n    //% blockId=ultrasonic_sensor block=\"超音波センサの値\"\n    //% weight=95\n    export function Ultrasonic(maxCmDistance = 200): number {\n        let data;\n        let i = 0;\n        data = readUlt();\n        if (state1 == 1 && data != 0) {\n            state1 = 0;\n        }\n        if (data != 0) {\n        } else {\n            if (state1 == 0) {\n                do {\n                    data = readUlt();\n                    i++;\n                    if (i > 3) {\n                        state1 = 1;\n                        data = 200;\n                        break;\n                    }\n                } while (data == 0)\n            }\n        }\n        if (data == 0)\n            data = 200;\n        return data;\n    }\n\n    function readUlt(): number {\n        let d;\n        pins.digitalWritePin(DigitalPin.P12, 1); // Trigピン\n        basic.pause(1);\n        pins.digitalWritePin(DigitalPin.P12, 0);\n\n        if (pins.digitalReadPin(DigitalPin.P11) == 0) { // Echoピン\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            basic.pause(20);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P11, PulseValue.High, 200 * 58); // 最大距離を200cmに設定\n        } else {\n            pins.digitalWritePin(DigitalPin.P12, 1);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            basic.pause(20);\n            pins.digitalWritePin(DigitalPin.P12, 0);\n            d = pins.pulseIn(DigitalPin.P11, PulseValue.Low, 200 * 58); // 最大距離を200cmに設定\n        }\n\n        let x = d / 59;\n        return Math.round(x); // センチメートル単位で返す\n    }\n}","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1729741575172,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"222\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_sensorMonitoring\"></block></statement></block></xml>","main.ts":"Plumbot.initOLED()\nbasic.forever(function () {\n    Plumbot.sensorMonitoring()\n})\n","README.md":"","Plumbot.ts":"//% weight=100 color=#ea618e icon=\"\"\nnamespace Plumbot {\n\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * ラインセンサーと超音波センサーのモニタリングを行うブロック\n     * P3とP4はラインセンサー、P12とP11は超音波センサー用\n     */\n    //% block=\"センサーモニタリング\"\n    export function sensorMonitoring(): void {\n        basic.forever(function () {\n            // モニタリング開始表示\n            OLED12864_I2C.showString(1, 0, \"monitoring\", 1);\n\n            // ラインセンサの値 (左: P3、右: P4) - 2行目\n            OLED12864_I2C.showString(0, 1, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 2, \" \", 1);\n                OLED12864_I2C.showNumber(1, 2, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 2, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 2, \" \", 1);\n                OLED12864_I2C.showNumber(9, 2, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 2, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 2, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n\n            // 超音波センサの値 (P12: Trig, P11: Echo) - 3行目と4行目\n            OLED12864_I2C.showString(0, 3, \"Sonar\", 1);\n\n            let distance = UltrasonicSensor(); // 超音波センサの値を取得\n            if (distance < 10) {\n                OLED12864_I2C.showString(6, 3, \"  \", 1);\n                OLED12864_I2C.showNumber(8, 3, distance, 1);\n                OLED12864_I2C.showString(9, 3, \" cm\", 1);\n            } else if (distance < 100) {\n                OLED12864_I2C.showString(6, 3, \" \", 1);\n                OLED12864_I2C.showNumber(7, 3, distance, 1);\n                OLED12864_I2C.showString(9, 3, \" cm\", 1);\n            } else {\n                OLED12864_I2C.showNumber(6, 3, distance, 1);\n            }\n        });\n    }\n\n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12、EchoピンはP11、単位はcmに固定\n     */\n    //% block=\"超音波センサの値\"\n    export function UltrasonicSensor(): number {\n        // トリガーピンとエコーピンを固定\n        const trig = DigitalPin.P12;\n        const echo = DigitalPin.P11;\n        const maxCmDistance = 500;\n\n        // トリガーピンでパルスを送信\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // エコーピンでパルスの返り時間を読み取る\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        // センチメートルに変換して返す\n        return Math.idiv(d, 58);\n    }\n}\n","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1729743381663,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"222\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_sensorMonitoring\"></block></statement></block></xml>","main.ts":"","README.md":"","Plumbot.ts":"//% weight=100 color=#ea618e icon=\"\"\nnamespace Plumbot {\n\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * ラインセンサーと超音波センサーのモニタリングを行うブロック\n     * P3とP4はラインセンサー、P12とP11は超音波センサー用\n     */\n    //% block=\"センサーモニタリング\"\n    export function sensorMonitoring(): void {\n        let lastDistance = 0; // 前回の超音波センサーの値を保持\n        basic.forever(function () {\n            // ラインセンサの値 (左: P3、右: P4) - 1行目\n            OLED12864_I2C.showString(0, 0, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 1, \" \", 1);\n                OLED12864_I2C.showNumber(1, 1, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 1, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 1, \" \", 1);\n                OLED12864_I2C.showNumber(9, 1, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 1, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n\n            // 超音波センサの値 (P12: Trig, P11: Echo) - 2行目と3行目\n            OLED12864_I2C.showString(0, 2, \"Sonar\", 1);\n\n            let distance = UltrasonicSensor(); // 超音波センサの値を取得\n\n            // 値が0でない場合のみ更新する\n            if (distance != 0) {\n                lastDistance = distance; // 有効な値であれば更新\n                if (distance < 10) {\n                    OLED12864_I2C.showString(6, 2, \"  \", 1);\n                    OLED12864_I2C.showNumber(8, 2, distance, 1);\n                    OLED12864_I2C.showString(9, 2, \" cm\", 1);\n                } else if (distance < 100) {\n                    OLED12864_I2C.showString(6, 2, \" \", 1);\n                    OLED12864_I2C.showNumber(7, 2, distance, 1);\n                    OLED12864_I2C.showString(9, 2, \" cm\", 1);\n                } else {\n                    OLED12864_I2C.showNumber(6, 2, distance, 1);\n                }\n            }\n        });\n    }\n\n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12、EchoピンはP11、単位はcmに固定\n     */\n    //% block=\"超音波センサの値\"\n    export function UltrasonicSensor(): number {\n        // トリガーピンとエコーピンを固定\n        const trig = DigitalPin.P12;\n        const echo = DigitalPin.P11;\n        const maxCmDistance = 500;\n\n        // トリガーピンでパルスを送信\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // エコーピンでパルスの返り時間を読み取る\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        // センチメートルに変換して返す。0の場合はそのまま返す\n        return Math.idiv(d, 58) || 0;\n    }\n}\n","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1729748767476,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"227\" y=\"14\"><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Plumbot_UltrasonicSensor\"></block></value></block></statement></block></xml>","main.ts":"Plumbot.initOLED()\nbasic.forever(function () {\n    serial.writeLine(\"\" + (Plumbot.UltrasonicSensor()))\n})\n","README.md":"","Plumbot.ts":"//% weight=100 color=#ea618e icon=\"\"\nnamespace Plumbot {\n\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * ラインセンサーと超音波センサーのモニタリングを行うブロック\n     * P3とP4はラインセンサー、P12とP11は超音波センサー用\n     */\n    //% block=\"センサーモニタリング\"\n    export function sensorMonitoring(): void {\n        basic.forever(function () {\n            // ラインセンサの値 (左: P3、右: P4) - 1行目\n            OLED12864_I2C.showString(0, 0, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 1, \" \", 1);\n                OLED12864_I2C.showNumber(1, 1, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 1, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 1, \" \", 1);\n                OLED12864_I2C.showNumber(9, 1, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 1, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n\n            // 超音波センサの値 (P12: Trig, P11: Echo) - 2行目と3行目\n            OLED12864_I2C.showString(0, 2, \"Sonar\", 1);\n\n            let distance = UltrasonicSensor(); // 超音波センサの値を取得\n            if (distance < 10) {\n                OLED12864_I2C.showString(6, 2, \"  \", 1);\n                OLED12864_I2C.showNumber(8, 2, distance, 1);\n                OLED12864_I2C.showString(9, 2, \" cm\", 1);\n            } else if (distance < 100) {\n                OLED12864_I2C.showString(6, 2, \" \", 1);\n                OLED12864_I2C.showNumber(7, 2, distance, 1);\n                OLED12864_I2C.showString(9, 2, \" cm\", 1);\n            } else {\n                OLED12864_I2C.showNumber(6, 2, distance, 1);\n            }\n        });\n    }\n\n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12、EchoピンはP11、単位はcmに固定\n     */\n    //% block=\"超音波センサの値\"\n    export function UltrasonicSensor(): number {\n        // トリガーピンとエコーピンを固定\n        const trig = DigitalPin.P12;\n        const echo = DigitalPin.P11;\n        const maxCmDistance = 500;\n\n        // トリガーピンでパルスを送信\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // エコーピンでパルスの返り時間を読み取る\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        // センチメートルに変換して返す\n        return Math.idiv(d, 58);\n    }\n}\n","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1729750572842,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"195\" y=\"-8\"><statement name=\"HANDLER\"><block type=\"Plumbot_LinesensorMonitoring\"></block></statement></block></xml>","main.ts":"","README.md":"","Plumbot.ts":"//% weight=100 color=#ea618e icon=\"\"\nnamespace Plumbot {\n\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * ラインセンサーのモニタリングを行うブロック\n     * P3とP4はラインセンサー用\n     */\n    //% block=\"ラインセンサモニタリング\"\n    export function LinesensorMonitoring(): void {\n        basic.forever(function () {\n            // ラインセンサの値 (左: P3、右: P4) - 1行目\n            OLED12864_I2C.showString(0, 0, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 1, \" \", 1);\n                OLED12864_I2C.showNumber(1, 1, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 1, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 1, \" \", 1);\n                OLED12864_I2C.showNumber(9, 1, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 1, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n        });\n    }\n    /**\n     * 超音波センサーのモニタリングを行うブロック\n     * P12とP11は超音波センサー用\n     */\n    //% block=\"超音波センサモニタリング\"\n    export function SonarsensorMonitoring(): void {\n        Plumbot.initOLED()\n        OLED12864_I2C.showNumber(0,0,sonar.ping(DigitalPin.P12,DigitalPin.P11,PingUnit.Centimeters),1)\n        OLED12864_I2C.showString(3,0,\"cm\",1)\n    }\n    /**\n         * 左のラインセンサーの値を取得するブロック\n         * P3に固定\n         */\n    //% block=\"左ラインセンサの値\"\n    export function getLeftLineSensorValue(): number {\n        return pins.analogReadPin(AnalogPin.P3); // 左のラインセンサーはP3に接続\n    }\n    \n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12、EchoピンはP11、単位はcmに固定\n     */\n    //% block=\"超音波センサの値\"\n    export function UltrasonicSensor(): number {\n        // トリガーピンとエコーピンを固定\n        const trig = DigitalPin.P12;\n        const echo = DigitalPin.P11;\n        const maxCmDistance = 500;\n\n        // トリガーピンでパルスを送信\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // エコーピンでパルスの返り時間を読み取る\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        // センチメートルに変換して返す\n        return Math.idiv(d, 58);\n    }\n}\n","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1729753295615,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"-341\" y=\"84\"><statement name=\"HANDLER\"><block type=\"Plumbot_initOLED\"></block></statement></block><block type=\"device_forever\" x=\"-126\" y=\"82\"><statement name=\"HANDLER\"><block type=\"Plumbot_LinesensorMonitoring\"></block></statement></block></xml>","main.ts":"","README.md":"","Plumbot.ts":"//% weight=100 color=#ea618e icon=\"\"\nnamespace Plumbot {\n\n    /**\n     * OLEDディスプレイを初期化するブロック\n     */\n    //% block=\"OLEDを使う\"\n    export function initOLED(): void {\n        OLED12864_I2C.init(60); // OLEDディスプレイの初期化\n    }\n\n    /**\n     * ラインセンサーのモニタリングを行うブロック\n     * P3とP4はラインセンサー用\n     */\n    //% block=\"ラインセンサモニタリング\"\n    export function LinesensorMonitoring(): void {\n        basic.forever(function () {\n            // ラインセンサの値 (左: P3、右: P4) - 1行目\n            OLED12864_I2C.showString(0, 0, \"Line_L Line_R\", 1);\n\n            if (pins.analogReadPin(AnalogPin.P3) < 999) {\n                OLED12864_I2C.showString(0, 1, \" \", 1);\n                OLED12864_I2C.showNumber(1, 1, pins.analogReadPin(AnalogPin.P3), 1);\n                OLED12864_I2C.showString(4, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(0, 1, pins.analogReadPin(AnalogPin.P3), 1);\n            }\n\n            if (pins.analogReadPin(AnalogPin.P4) < 999) {\n                OLED12864_I2C.showString(8, 1, \" \", 1);\n                OLED12864_I2C.showNumber(9, 1, pins.analogReadPin(AnalogPin.P4), 1);\n                OLED12864_I2C.showString(12, 1, \" \", 1);\n            } else {\n                OLED12864_I2C.showNumber(8, 1, pins.analogReadPin(AnalogPin.P4), 1);\n            }\n        });\n    }\n    /**\n     * 超音波センサーのモニタリングを行うブロック\n     * P12とP11は超音波センサー用\n     */\n    //% block=\"超音波センサモニタリング\"\n    export function SonarsensorMonitoring(): void {\n        Plumbot.initOLED()\n        OLED12864_I2C.showNumber(0,0,sonar.ping(DigitalPin.P12,DigitalPin.P11,PingUnit.Centimeters),1)\n        OLED12864_I2C.showString(3,0,\"cm\",1)\n    }\n    /**\n    * 左のラインセンサーの値を取得するブロック\n    * P3に固定\n    */\n    //% block=\"左ラインセンサの値\"\n    export function getLeftLineSensorValue(): number {\n        return pins.analogReadPin(AnalogPin.P3); // 左のラインセンサーはP3に接続\n    }\n\n    /**\n    * 右のラインセンサーの値を取得するブロック\n    * P4に固定\n    */\n    //% block=\"右ラインセンサの値\"\n    export function getRightLineSensorValue(): number {\n        return pins.analogReadPin(AnalogPin.P4); // 右のラインセンサーはP4に接続\n    }\n    \n    /**\n     * 超音波センサの値を取得するブロック\n     * TrigピンはP12、EchoピンはP11、単位はcmに固定\n     */\n    //% block=\"超音波センサの値\"\n    export function UltrasonicSensor(): number {\n        // トリガーピンとエコーピンを固定\n        const trig = DigitalPin.P12;\n        const echo = DigitalPin.P11;\n        const maxCmDistance = 500;\n\n        // トリガーピンでパルスを送信\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // エコーピンでパルスの返り時間を読み取る\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        // センチメートルに変換して返す\n        return Math.idiv(d, 58);\n    }\n\n    /**\n     * ロボットが直進するブロック\n     */\n    //% block=\"ロボット直進\"\n    export function moveForward(): void {\n        // 左モータ正転 (P13), 右モータ正転 (P15)\n        pins.analogWritePin(AnalogPin.P13, 1023); // 左モーター正転\n        pins.analogWritePin(AnalogPin.P14, 0);     // 左モーター逆転停止\n        pins.analogWritePin(AnalogPin.P15, 1023); // 右モーター正転\n        pins.analogWritePin(AnalogPin.P16, 0);     // 右モーター逆転停止\n    }\n\n    /**\n     * ロボットが後退するブロック\n     */\n    //% block=\"ロボット後退\"\n    export function moveBackward(): void {\n        // 左モータ逆転 (P14), 右モータ逆転 (P16)\n        pins.analogWritePin(AnalogPin.P13, 0);     // 左モーター正転停止\n        pins.analogWritePin(AnalogPin.P14, 1023); // 左モーター逆転\n        pins.analogWritePin(AnalogPin.P15, 0);     // 右モーター正転停止\n        pins.analogWritePin(AnalogPin.P16, 1023); // 右モーター逆転\n    }\n\n    /**\n     * ロボットが左回転するブロック\n     */\n    //% block=\"ロボット左回転\"\n    export function turnLeft(): void {\n        // 左モータ逆転 (P14), 右モータ正転 (P15)\n        pins.analogWritePin(AnalogPin.P13, 0);     // 左モーター正転停止\n        pins.analogWritePin(AnalogPin.P14, 1023); // 左モーター逆転\n        pins.analogWritePin(AnalogPin.P15, 1023); // 右モーター正転\n        pins.analogWritePin(AnalogPin.P16, 0);     // 右モーター逆転停止\n    }\n\n    /**\n     * ロボットが右回転するブロック\n     */\n    //% block=\"ロボット右回転\"\n    export function turnRight(): void {\n        // 左モータ正転 (P13), 右モータ逆転 (P16)\n        pins.analogWritePin(AnalogPin.P13, 1023); // 左モーター正転\n        pins.analogWritePin(AnalogPin.P14, 0);     // 左モーター逆転停止\n        pins.analogWritePin(AnalogPin.P15, 0);     // 右モーター正転停止\n        pins.analogWritePin(AnalogPin.P16, 1023); // 右モーター逆転\n    }\n\n    /**\n     * ロボットを停止させるブロック\n     */\n    //% block=\"ロボット停止\"\n    export function stop(): void {\n        // すべてのモーターを停止\n        pins.analogWritePin(AnalogPin.P13, 0); // 左モーター正転停止\n        pins.analogWritePin(AnalogPin.P14, 0); // 左モーター逆転停止\n        pins.analogWritePin(AnalogPin.P15, 0); // 右モーター正転停止\n        pins.analogWritePin(AnalogPin.P16, 0); // 右モーター逆転停止\n    }\n}\n","pxt.json":"{\n    \"name\": \"Plumbot Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"OLED12864_I2C\": \"github:makecode-extensions/oled12864_i2c#v1.5.0\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Plumbot.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1729754227957}